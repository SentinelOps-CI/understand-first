name: Understand-First Commenter Service

on:
  pull_request:
    types: [opened, synchronize, reopened, closed]
  workflow_dispatch:
    inputs:
      pr_number:
        description: "PR number to analyze"
        required: true
        type: string

jobs:
  commenter-service:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
      checks: write
      actions: read
      statuses: write
      issues: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install typer rich aiohttp asyncpg pydantic requests

      - name: Run Understand-First Commenter
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_NUMBER: ${{ github.event.number || github.event.inputs.pr_number }}
        run: |
          python -c "
          import os
          import json
          import requests
          from datetime import datetime

          # GitHub API setup
          token = os.environ['GITHUB_TOKEN']
          pr_number = os.environ['PR_NUMBER']
          repo = os.environ['GITHUB_REPOSITORY']

          headers = {
              'Authorization': f'token {token}',
              'Accept': 'application/vnd.github.v3+json'
          }

          # Get PR details
          pr_url = f'https://api.github.com/repos/{repo}/pulls/{pr_number}'
          pr_response = requests.get(pr_url, headers=headers)
          pr_data = pr_response.json()

          base_sha = pr_data['base']['sha']
          head_sha = pr_data['head']['sha']

          print(f'Analyzing PR #{pr_number}: {pr_data[\"title\"]}')
          print(f'Base: {base_sha[:8]} -> Head: {head_sha[:8]}')

          # Run analysis on both commits
          os.system(f'u analyze --output base-analysis.json --format json --commit {base_sha}')
          os.system(f'u analyze --output head-analysis.json --format json --commit {head_sha}')

          # Generate delta analysis
          os.system('u diff base-analysis.json head-analysis.json --output pr-delta.json --format json --policy-check --verbose')

          # Generate comment content
          os.system('u diff base-analysis.json head-analysis.json --output pr-comment.md --format markdown --policy-check')

          # Generate mini-map
          os.system('u diff base-analysis.json head-analysis.json --output pr-minimap.svg --format svg')

          # Read results
          with open('pr-delta.json', 'r') as f:
              delta_data = json.load(f)

          with open('pr-comment.md', 'r') as f:
              comment_content = f.read()

          # Read mini-map
          with open('pr-minimap.svg', 'r') as f:
              minimap_svg = f.read()

          # Create enhanced comment
          violations = delta_data.get('violations', [])
          policy_passed = len(violations) == 0

          # Convert SVG to data URL
          import base64
          minimap_base64 = base64.b64encode(minimap_svg.encode()).decode()
          minimap_data_url = f'data:image/svg+xml;base64,{minimap_base64}'

          enhanced_comment = f'''
          ## üîç Understand-First PR Analysis

          {comment_content}

          ### üìä Mini-Map Visualization
          <img src=\"{minimap_data_url}\" alt=\"Code Map Delta\" width=\"100%\" />

          ### ‚úÖ Policy Compliance Checklist
          {('‚úÖ **All policies passed!** No violations detected.' if policy_passed else 
            '\\n'.join([f'‚ùå **{v[\"rule\"]}**: {v[\"description\"]}' for v in violations]))}

          ### üìà Key Metrics
          - **Functions Added**: {len(delta_data.get('functions_added', []))}
          - **Functions Removed**: {len(delta_data.get('functions_removed', []))}
          - **Functions Modified**: {len(delta_data.get('functions_modified', []))}
          - **Complexity Change**: {delta_data.get('complexity_change', 0):+d}
          - **Side Effects**: {len(delta_data.get('side_effects_added', []))} added, {len(delta_data.get('side_effects_removed', []))} removed

          ### üéØ Action Items
          {('‚úÖ Ready to merge!' if policy_passed else 
            '\\n'.join([f'- [ ] Fix: {v[\"description\"]} in `{v[\"function_name\"]}`' for v in violations]))}

          ---
          *Generated by [Understand-First](https://github.com/your-org/understand-first) ‚Ä¢ [View full analysis]({pr_data[\"html_url\"]}/checks)*
          '''

          # Post or update comment
          comments_url = f'https://api.github.com/repos/{repo}/issues/{pr_number}/comments'
          comments_response = requests.get(comments_url, headers=headers)
          comments = comments_response.json()

          existing_comment = next((c for c in comments if 'Understand-First PR Analysis' in c['body']), None)

          if existing_comment:
              # Update existing comment
              update_url = f'https://api.github.com/repos/{repo}/issues/comments/{existing_comment[\"id\"]}'
              requests.patch(update_url, headers=headers, json={'body': enhanced_comment})
              print('Updated existing comment')
          else:
              # Create new comment
              requests.post(comments_url, headers=headers, json={'body': enhanced_comment})
              print('Created new comment')

          # Create Check Run
          check_run_data = {
              'name': 'Understand-First Analysis',
              'head_sha': head_sha,
              'status': 'completed',
              'conclusion': 'success' if policy_passed else 'failure',
              'output': {
                  'title': '‚úÖ Understand-First Policy Check Passed' if policy_passed else '‚ùå Understand-First Policy Check Failed',
                  'summary': 'All code quality policies passed. The PR is safe to merge.' if policy_passed else f'{len(violations)} policy violations detected. Please review before merging.',
                  'text': '\\n\\n'.join([f'**{v[\"rule\"]}**: {v[\"description\"]}\\n- Function: {v[\"function_name\"]}\\n- Severity: {v[\"severity\"]}\\n- File: {v[\"file_path\"]}:{v[\"line_number\"]}' for v in violations]) if violations else 'No violations found.'
              },
              'actions': [
                  {
                      'label': 'View Full Report',
                      'description': 'Open detailed analysis report',
                      'identifier': 'view-report'
                  },
                  {
                      'label': 'Download Artifacts',
                      'description': 'Download analysis artifacts',
                      'identifier': 'download-artifacts'
                  }
              ]
          }

          checks_url = f'https://api.github.com/repos/{repo}/check-runs'
          requests.post(checks_url, headers=headers, json=check_run_data)
          print('Created Check Run')

          # Set commit status
          status_data = {
              'state': 'success' if policy_passed else 'failure',
              'description': 'Understand-First: All policies passed' if policy_passed else 'Understand-First: Policy violations detected',
              'context': 'understand-first/policy-check'
          }

          status_url = f'https://api.github.com/repos/{repo}/statuses/{head_sha}'
          requests.post(status_url, headers=headers, json=status_data)
          print('Set commit status')

          print(f'Analysis complete. Policy check: {\"PASSED\" if policy_passed else \"FAILED\"}')
          "

      - name: Upload analysis artifacts
        uses: actions/upload-artifact@v3
        with:
          name: understand-first-pr-analysis-${{ github.event.number || github.event.inputs.pr_number }}
          path: |
            base-analysis.json
            head-analysis.json
            pr-delta.json
            pr-comment.md
            pr-minimap.svg
